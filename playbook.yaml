---
- name: Configure Fedora IoT on Raspberry Pi
  hosts: edge
  gather_facts: true
  vars:
    user_name: "{{ host_user_name }}"
    user_full_name: "{{ host_user_name }}"
    user_ssh_pub_key: "{{ ssh_public_key_file }}"
  vars_prompt:
    - name: "build_type"
      prompt: "Build type [minimal(default)/extended]"
      default: "minimal"
      private: no

  tasks:
    - name: Define hostname
      ansible.builtin.hostname:
        name: "{{ pi_hostname }}"

    - name: Add unprivileged user
      ansible.builtin.user:
        name: "{{ pi_user_name }}"
        comment: "{{ pi_user_name }}"
        password: "{{ pi_user_pass }}"
        uid: 1000
        group: wheel
        state: present

    - name: Set authorized key for new user
      ansible.posix.authorized_key:
        user: "{{ pi_user_name }}"
        state: present
        key: "{{ lookup('file', user_ssh_pub_key) }}"

    - name: Allow group wheel sudo access no password
      community.general.sudoers:
        name: wheel-all
        group: wheel
        commands: ALL
        nopassword: true

    - name: Load package list from JSON file
      ansible.builtin.include_vars:
        file: packages.json
        name: package_vars

    - name: Layer packages
      community.general.rpm_ostree_pkg:
        name: "{{ package_vars.packages }}"
        state: present
      register: ostree_results

    - name: Reboot system to enable new packages
      ansible.builtin.reboot:
        reboot_timeout: 600
      when:
        - ostree_results is changed

    - name: Layer extended packages
      community.general.rpm_ostree_pkg:
        name: cronie
        state: present
      register: extended_ostree_results
      when: build_type == "extended"

    - name: Reboot system to enable new packages
      ansible.builtin.reboot:
        reboot_timeout: 600
      when:
        - extended_ostree_results is changed

    - name: Enable Cockpit service
      ansible.builtin.systemd:
        name: cockpit
        state: started
        enabled: yes

    - name: Enable and start Cockpit socket
      ansible.builtin.systemd:
        name: cockpit.socket
        state: started
        enabled: yes

    - name: Allow Cockpit service through firewall
      ansible.builtin.command:
        cmd: "firewall-cmd --permanent --add-port=9090/tcp"
      become: true

    - name: Reload firewall
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      become: true

    - name: Enable Tailscale service
      ansible.builtin.systemd:
        name: tailscaled
        state: started
        enabled: yes

    - name: Ensure the rpm-ostreed-upgrade-reboot.service exists with desired content
      ansible.builtin.copy:
        dest: /etc/systemd/system/rpm-ostreed-upgrade-reboot.service
        content: |
          [Unit]
          Description=rpm-ostree upgrade and reboot
          ConditionPathExists=/run/ostree-booted

          [Service]
          Type=simple
          ExecStart=/usr/bin/rpm-ostree upgrade --reboot
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd

    - name: Ensure the rpm-ostreed-upgrade-reboot.timer exists with desired content
      ansible.builtin.copy:
        dest: /etc/systemd/system/rpm-ostreed-upgrade-reboot.timer
        content: |
          [Unit]
          Description=rpm-ostree upgrade and reboot trigger
          ConditionPathExists=/run/ostree-booted

          [Timer]
          OnCalendar=Sun *-*-* 03:00:00
          
          [Install]
          WantedBy=timers.target
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd

    - name: Enable and start the rpm-ostreed-upgrade-reboot.timer
      ansible.builtin.systemd:
        name: rpm-ostreed-upgrade-reboot.timer
        enabled: true
        state: started

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

